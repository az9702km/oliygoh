---
const {
  name,
  id,
  type,
  placeholder,
  leadingIcon,
  trailingIcon,
  addonBefore,
  addonAfter,
  utils,
  value,
  validated,
} = Astro.props;

let validation = {
  state: "",
  icon: "",
};
if (validated)
  switch (validated.state) {
    case "success":
      validation = {
        state: "validated validated--success",
        icon: "check",
      };
      break;

    case "error":
      validation = {
        state: "validated validated--error",
        icon: "error",
      };
      break;
  }
---

<div class:list={["input-field", utils, validation.state]}>
  {
    addonBefore && (
      <div class="add-on add-on--before">
        <svg class="icon !w-6">
          <use xlink:href={`#icon-${addonBefore}`} />
        </svg>
      </div>
    )
  }
  {
    leadingIcon && (
      <button class="input-field__icon leading-icon">
        <svg class="icon !w-20">
          <use xlink:href={`#icon-${leadingIcon}`} />
        </svg>
      </button>
    )
  }
  <input
    type={type}
    placeholder={placeholder}
    id={id}
    name={name}
    class="input-field__input"
    value={value}
  />
  {
    trailingIcon && (
      <button class="input-field__icon trailing-icon">
        <svg class="icon !w-20">
          <use xlink:href={`#icon-${trailingIcon}`} />
        </svg>
      </button>
    )
  }
  {
    addonAfter && (
      <div class="add-on add-on--after">
        <svg class="icon !w-6">
          <use xlink:href={`#icon-${addonAfter}`} />
        </svg>
      </div>
    )
  }
</div>
{
  validated && (
    <div class="helper-text">
      <svg class="icon !w-20">
        <use xlink:href={`#icon-${validation.icon}`} />
      </svg>
      {validated.text}
    </div>
  )
}
